<?php 

namespace App\Http\Controllers\Api\Cleaner;

use App\Http\Controllers\Controller;
use App\Models\CleanerReferral;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Cleaner;
use App\Models\ServiceDay;
use App\Helper\Helper; 
use App\Models\User;
use App\Models\BookingAdd;
use App\Models\CleanerEarn;

use Carbon\Carbon;


class CleanerReferralCodeController extends Controller
{
    protected $cleanerId;
    protected $cleaner;

    public function __construct()
    {
        $this->middleware(['auth:cleanerApi']);
        $this->middleware(function ($request, $next) {
            $this->cleanerId = Auth::guard('cleanerApi')->id();
            $this->cleaner = Auth::guard('cleanerApi')->user();
            return $next($request);
        });
    }




    public function getAuthUser(Request $request)
    {
        $user = Auth::user();
    // dd($user);
        $referralCount = Cleaner::where('use_code', $user->referral_code)->count();
    
        $userAmount = $user->amount;
    
        return response()->json([
            'id' => $user->id,
            'name' => $user->name,
            'email' => $user->email,
            'referral_code' => $user->referral_code,
            'referral_count' => $referralCount,
            'amount' => $referralCount * $userAmount, // Calculate amount based on referral count
        ]);
    }
    


  public function generateReferralCode(Request $request)
{
    $cleaner = Auth::guard('cleanerApi')->user();

    // Check if cleaner has already joined via any referral code
    $existingReferralJoin = CleanerReferral::where('cleaner_id', $cleaner->id)->first();
    if ($existingReferralJoin) {
        return response()->json([
            'success' => true,
            'referral_code' => $existingReferralJoin->referral_code,
            'message' => 'You have already joined using a referral code.'
        ]);
    }

    // Check if a referral code has already been generated by this cleaner
    $generatedByCleaner = CleanerReferral::where('generated_by', $cleaner->id)->first();
    if ($generatedByCleaner) {
        return response()->json([
            'success' => true,
            'referral_code' => $generatedByCleaner->referral_code,
            'message' => 'Referral code already generated.'
        ]);
    }

    // Generate unique referral code
    do {
        $randomNumber = mt_rand(10000, 99999);
        $referralCode = 'REF' . $randomNumber;
    } while (CleanerReferral::where('referral_code', $referralCode)->exists());

    // Save referral without cleaner_id (not yet used), but store who created it
    $referral = CleanerReferral::create([
        'referral_code' => $referralCode,
        'generated_by' => $cleaner->id, // <-- New column to track generator
        'cleaner_id' => null
    ]);

    return response()->json([
        'success' => true,
        'referral_code' => $referral->referral_code,
        'message' => 'Referral code generated successfully.'
    ]);
}





 public function joinWithReferralCode(Request $request)
{
    $cleaner = Auth::guard('cleanerApi')->user();

    if (!$cleaner) {
        return response()->json([
            'success' => false,
            'message' => 'Unauthorized. Invalid token.',
        ], 401);
    }

    $request->validate([
        'referral_code' => 'required|string|exists:cleaner_referrals,referral_code',
    ]);

    // Make sure this cleaner hasnâ€™t already used a referral code
    $alreadyJoined = CleanerReferral::where('cleaner_id', $cleaner->id)->first();
    if ($alreadyJoined) {
        return response()->json([
            'success' => false,
            'message' => 'You have already used a referral code.',
        ], 400);
    }

    $referral = CleanerReferral::where('referral_code', $request->referral_code)->first();

    if ($referral->cleaner_id) {
        return response()->json([
            'success' => false,
            'message' => 'This referral code has already been used.',
        ], 400);
    }

    $referral->cleaner_id = $cleaner->id;
    $referral->save();

    return response()->json([
        'success' => true,
        'message' => 'Referral code applied successfully.',
        'referral_code' => $referral->referral_code,
        'cleaner_id' => $cleaner->id,
    ]);
}



    public function getTotalJoined()
    {
        $totalJoined = CleanerReferral::whereNotNull('cleaner_id')->count();

        return response()->json([
            'success' => true,
            'total_joined' => $totalJoined
        ]);
    }

    public function getTotalEarned()
    {
        $cleaner = Auth::guard('cleanerApi')->user();

        if (!$cleaner) {
            return response()->json([
                'success' => false,
                'message' => 'Unauthorized. Invalid token.',
            ], 401);
        }

        $totalEarned = CleanerReferral::where('cleaner_id', $cleaner->id)->sum('reward');

        return response()->json([
            'success' => true,
            'total_earned' => $totalEarned
        ]);
    }

  public function getReferralStatistics()
{
    $cleaner = Auth::guard('cleanerApi')->user();

    if (!$cleaner) {
        return response()->json([
            'success' => false,
            'message' => 'Unauthorized. Invalid token.',
        ], 401);
    }

   
    $referral = CleanerReferral::where('generated_by', $cleaner->id)->first();
    $referralCode = $referral ? $referral->referral_code : null;

    $joinedReferrals = CleanerReferral::where('referral_code', $referralCode)
        ->whereNotNull('cleaner_id')
        ->with('cleaner') 
        ->get();

    
    $totalEarnedSum = $joinedReferrals->sum('reward');

  
    $joinedCleaners = $joinedReferrals->map(function ($ref) {
        return [
            'name' => optional($ref->cleaner)->name,
            'joined_date' => optional($ref->updated_at)->format('Y-m-d H:i:s'),
            'reward' => $ref->reward
        ];
    });

    return response()->json([
        'success' => true,
        'referral_code' => $referralCode,
        'total_earned_count' => $totalEarnedSum,
        'total_joined_count' => $joinedCleaners->count(),
        'joined_cleaners' => $joinedCleaners
    ]);
}

    
    public function getCleanerDetails()
{
    $cleaner = Auth::guard('cleanerApi')->user();

    if (!$cleaner) {
        return response()->json([
            'success' => false,
            'message' => 'Unauthorized. Invalid token.',
        ], 401);
    }

       $cleanerImage = Helper::showImage($cleaner->image);
       $cleanerName = $cleaner->name;

   $completeWork = BookingAdd::where('cleaners_id', $cleaner->id)    
    ->where('status', 1) 
    ->count();


    $weeklyReward = CleanerReferral::where('cleaner_id', $cleaner->id)
        ->whereDate('created_at', '>=', Carbon::now()->subWeek())
        ->sum('reward');


        $weeklyReward = CleanerEarn::where('cleaners_id', $cleaner->id)
        ->whereDate('created_at', '>=', Carbon::now()->subWeek())
        ->sum('amount');

        // ->get();


    // $warningMessage = null;
    // if ($weeklyReward < 50) {
    //     $warningMessage = "Warning: Your weekly referral reward is low. Try inviting more people!";
    // }

    return response()->json([
        'success' => true,
        'cleaner_image' => $cleanerImage,
        'name' => $cleanerName,
        'complete_work' => $completeWork,
        'weekly_reward' => $weeklyReward,
        // 'warning' => $warningMessage,
    ]);
}
}
